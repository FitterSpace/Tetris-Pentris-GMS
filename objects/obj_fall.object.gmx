<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_O</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[1] = global.Piece_Gravity

image_speed = 0

FallTimer = room_speed/30

GamePadLeft = false
GamePadRight = false
GamePadDown = false
AHeld = false
BHeld = false

// Topping Out
if place_meeting(x,y,obj_block) {
    obj_control.alarm[0] = -1
    obj_control.alarm[3] = -1
    obj_control.alarm[1] = room_speed*3
    audio_stop_sound(mus_a)
    audio_stop_sound(mus_b)
    audio_stop_sound(mus_c)
    audio_play_sound(snd_topout,10,false)
    instance_create(global.BOARD_LEFT-32,global.BOARD_TOP,obj_block_printer)
    instance_create(global.BOARD_LEFT,global.BOARD_TOP,obj_check_field)
    instance_destroy()
}

// Advancing to the next level
if global.lines &gt;= global.NextLevel {
    global.level += 1
    global.NextLevel += 10
    audio_play_sound(snd_nextlevel,9,false)
}

// B-Type Win
if (room = rm_Tetris_BType 
or room = rm_Pentris_BType
or room = rm_Tetris_Variety_BType
or room = rm_Pentris_Variety_BType)
and global.lines &lt;= 0 {
    obj_control.alarm[0] = -1
    instance_create(room_width/2,room_height/2,obj_success)
    instance_destroy()
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Piece Falling on a timer

if !place_meeting(x,y+32,obj_solid) {
    y += 32
    alarm[1] = global.Piece_Gravity
} else {
    obj_control.alarm[0] = room_speed/6
    instance_create(global.BOARD_LEFT-32,global.BOARD_TOP,obj_block_printer)
    instance_create(global.BOARD_LEFT,global.BOARD_TOP,obj_check_field)
    audio_play_sound(snd_drop,5,false)
    
    scr_UpdateScore()
    
    instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>KEY_RIGHT = vk_right
KEY_LEFT = vk_left
KEY_DOWN = vk_down
KEY_COUNTER_CLOCKWISE = ord("Z")
KEY_CLOCKWISE = ord("X")

// Generic Gamepad Buttons
if (gamepad_axis_value(4,gp_axislh) &gt;= 0) {GamePadLeft = false} 
if (gamepad_axis_value(4,gp_axislh) &lt;= 0) {GamePadRight = false} 
if (gamepad_axis_value(4,gp_axislv) &lt;= 0) {GamePadDown = false} 
if !gamepad_button_check(4,gp_face1) {AHeld = false}
if !gamepad_button_check(4,gp_face3) {BHeld = false}


// Down
if (keyboard_check(KEY_DOWN)) or (gamepad_axis_value(4,gp_axislv) &gt; 0) {
    FallTimer -= 1
}

// Fall Timer
if FallTimer &lt;= 0 {
    if !place_meeting(x,y+32,obj_solid) {
        y += 32
    } else {
        obj_control.alarm[0] = room_speed/6
        instance_create(global.BOARD_LEFT-32,global.BOARD_TOP,obj_block_printer)
        instance_create(global.BOARD_LEFT,global.BOARD_TOP,obj_check_field)
        audio_play_sound(snd_drop,5,false)
        
        scr_UpdateScore()
    
        instance_destroy()
    }
    FallTimer += room_speed/30
}

// Press Left
if (keyboard_check_pressed(KEY_LEFT)) {
    if !place_meeting(x-32,y,obj_solid) {
        x -= 32
        audio_play_sound(snd_move,9,false)
    }
}

// Press Right
if keyboard_check_pressed(KEY_RIGHT) {
    if !place_meeting(x+32,y,obj_solid) {
        x += 32
        audio_play_sound(snd_move,9,false)
    }
}

// Gamepad Press Left
if gamepad_axis_value(4,gp_axislh) &lt; 0 and GamePadLeft = false {
    GamePadLeft = true
    if !place_meeting(x-32,y,obj_solid) {
        x -= 32
        audio_play_sound(snd_move,9,false)
    }
}

// Gamepad Press Right
if gamepad_axis_value(4,gp_axislh) &gt; 0 and GamePadRight = false {
    GamePadRight = true
    if !place_meeting(x+32,y,obj_solid) {
        x += 32
        audio_play_sound(snd_move,9,false)
    }
}
    

/* DAS Timer
if keyboard_check(KEY_LEFT) + keyboard_check(KEY_RIGHT) = 1 {
    global.DAS -= 1
} else {
    global.DAS = global.DAS_Timer
} */

// DAS Move
if global.DAS &lt;= 0 {

    if keyboard_check(KEY_LEFT)
    or gamepad_axis_value(4,gp_axislh) &lt; 0
    and not keyboard_check(KEY_RIGHT) {
        if !place_meeting(x-32,y,obj_solid) {
            x -= 32
            audio_play_sound(snd_move,9,false)
        }
    } else if keyboard_check(KEY_RIGHT) 
    or gamepad_axis_value(4,gp_axislh) &gt; 0
    and not keyboard_check(KEY_LEFT) {
        if !place_meeting(x+32,y,obj_solid) {
            x += 32
            audio_play_sound(snd_move,9,false)
        }
    } 
    
    global.DAS = global.DAS_Speed
}

// Piece Rotation (Clockwise) (keyboard)
if keyboard_check_pressed(KEY_CLOCKWISE) {
    image_index += 1
    if place_meeting(x,y,obj_solid) {
        image_index -= 1
    } else {
        audio_play_sound(snd_flip,9,false)
    }
}

// Piece Rotation (Counter Clockwise) (keyboard)
if keyboard_check_pressed(KEY_COUNTER_CLOCKWISE) {
    image_index -= 1
    if place_meeting(x,y,obj_solid) {
        image_index += 1
    } else {
        audio_play_sound(snd_flip,9,false)
    }
}

// Piece Rotation (Clockwise) (gamepad)
if gamepad_button_check(4,gp_face1) 
and AHeld = false {
    AHeld = true
    image_index += 1
    if place_meeting(x,y,obj_solid) {
        image_index -= 1
    } else {
        audio_play_sound(snd_flip,9,false)
    }
    
}

// Piece Rotation (Counter Clockwise) (gamepad)
if gamepad_button_check(4,gp_face3) 
and BHeld = false {
    BHeld = true
    image_index -= 1
    if place_meeting(x,y,obj_solid) {
        image_index += 1
    } else {
        audio_play_sound(snd_flip,9,false)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
