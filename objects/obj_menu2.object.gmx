<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>GamePadLeft = true
GamePadRight = true
GamePadDown = true
GamePadUp = true
AHeld = true
BHeld = true
StartHeld = true

gamepad = 0
gamepad_set_axis_deadzone(4,0.7)


menu_x = 256
menu_y = room_height/2
button_h = 196


// buttons
button[0,0] = "Level"
button[1,0] = "Height"
button[2,0] = "Music"
button[0,1] = 0 // level
button[1,1] = 0 // height
button[2,1] = 1 // music
buttons = array_height_2d(button)

global.StartLevel = button[0,1]
global.B_TYPE_SELECTION = button[1,1]
global.music = button[2,1]

menu_index = 0
last_selected = 0
last_increased = 0
menu_increase = 0

// 0 = Tetris A-Type, 1 = Tetris B-Type
// 2 = Pentris A-Type, 3 = Pentris B-Type
// (for global.GameSelection)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (gamepad_axis_value(4,gp_axislh) &gt;= 0) {GamePadLeft = false}  // left &lt; 0
if (gamepad_axis_value(4,gp_axislh) &lt;= 0) {GamePadRight = false} // right &gt; 0
if (gamepad_axis_value(4,gp_axislv) &lt;= 0) {GamePadDown = false}  // down &gt; 0
if (gamepad_axis_value(4,gp_axislv) &gt;= 0) {GamePadUp = false}  // up &lt; 0
if !gamepad_button_check(4,gp_face1) {AHeld = false} // a
if !gamepad_button_check(4,gp_face3) {BHeld = false} // b
if !gamepad_button_check(4,gp_start) {StartHeld = false} // b

// Moving the cursor on the menu (keyboard)
menu_move = keyboard_check_pressed(vk_right) - keyboard_check_pressed(vk_left);
menu_increase = keyboard_check_pressed(vk_up) - keyboard_check_pressed(vk_down);

// Moving the cursor on the menu (gamepad)
if (gamepad_axis_value(4,gp_axislh) &gt; 0 // right
and GamePadRight = false) {
    GamePadRight = true
    menu_index += 1
    }  

if (gamepad_axis_value(4,gp_axislh) &lt; 0 // left
and GamePadLeft = false) {
    GamePadLeft = true
    menu_index -= 1
    }  
    
if (gamepad_axis_value(4,gp_axislv) &lt; 0 // up
and GamePadUp = false) {
    GamePadUp = true
    button[menu_index,1] += 1
    }  

if (gamepad_axis_value(4,gp_axislv) &gt; 0 // down
and GamePadDown = false) {
    GamePadDown = true
    button[menu_index,1] -= 1
    }  
    

// Highlighting different menu options
menu_index += menu_move


if (menu_index &lt; 0) {menu_index = buttons - 1}
if (menu_index &gt; buttons - 1) {menu_index = 0}

button[menu_index,1] += menu_increase

// capping the variables
if button[0,1] &lt; 0 {button[0,1] = 30}
if button[1,1] &lt; 0 {button[1,1] = 5}
if button[2,1] &lt; 0 {button[2,1] = 3}
if button[0,1] &gt; 30 {button[0,1] = 0}
if button[1,1] &gt; 5 {button[1,1] = 0}
if button[2,1] &gt; 3 {button[2,1] = 0}

// Menu sounds
if menu_index != last_selected {audio_play_sound(snd_selection,1,false)}

if button[menu_index,1] != last_increased 
and menu_index = last_selected {audio_play_sound(snd_selection,0.5,false)}

last_selected = menu_index;
last_increased = button[menu_index,1]


// Selecting an option
if keyboard_check_pressed(vk_enter) 
or (gamepad_button_check(4,gp_face1) and AHeld = false) 
or (gamepad_button_check(4,gp_start) and StartHeld = false) {
    
    AHeld = true
    StartHeld = true
    
    room = global.GameSelection
    instance_destroy()
}

// Going back
if keyboard_check_pressed(vk_backspace) 
or (gamepad_button_check(4,gp_face3) and BHeld = false) {
    
    BHeld = true
    
    room = rm_main
    instance_destroy()
}

// keeping track of variables you can set on the menu
global.StartLevel = button[0,1]
global.B_TYPE_SELECTION = button[1,1]
global.music = button[2,1]

if gamepad_button_check(4,gp_face1) {gamepad = 1} // a
else if gamepad_button_check(4,gp_face3) {gamepad = 2} // b
else if gamepad_axis_value(4,gp_axislv) &lt; 0 {gamepad = 3} // up
else if gamepad_axis_value(4,gp_axislv) &gt; 0 {gamepad = 4} // down
else if gamepad_axis_value(4,gp_axislh) &lt; 0 {gamepad = 5} // left
else if gamepad_axis_value(4,gp_axislh) &gt; 0 {gamepad = 6} // right
else if gamepad_button_check(4,gp_start) {gamepad = 7} // start
else {gamepad = 0}

// B-Type Height
if global.GameSelection == rm_Tetris_BType
or global.GameSelection == rm_Tetris_Variety_BType {

    if global.B_TYPE_SELECTION = 0 {global.B_TYPE_HEIGHT = 0}
    if global.B_TYPE_SELECTION = 1 {global.B_TYPE_HEIGHT = 3}
    if global.B_TYPE_SELECTION = 2 {global.B_TYPE_HEIGHT = 5}
    if global.B_TYPE_SELECTION = 3 {global.B_TYPE_HEIGHT = 8}
    if global.B_TYPE_SELECTION = 4 {global.B_TYPE_HEIGHT = 10}
    if global.B_TYPE_SELECTION = 5 {global.B_TYPE_HEIGHT = 12}
    
} else if global.GameSelection == rm_Pentris_BType 
or global.GameSelection == rm_Pentris_Variety_BType{

    if global.B_TYPE_SELECTION = 0 {global.B_TYPE_HEIGHT = 0}
    if global.B_TYPE_SELECTION = 1 {global.B_TYPE_HEIGHT = 3}
    if global.B_TYPE_SELECTION = 2 {global.B_TYPE_HEIGHT = 6}
    if global.B_TYPE_SELECTION = 3 {global.B_TYPE_HEIGHT = 9}
    if global.B_TYPE_SELECTION = 4 {global.B_TYPE_HEIGHT = 12}
    if global.B_TYPE_SELECTION = 5 {global.B_TYPE_HEIGHT = 14}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

var i = 0;
repeat (buttons) {
    
    draw_set_font(fnt_score)
    draw_set_halign(fa_center)
    draw_set_color(c_white)

    if (menu_index == i) draw_set_color(c_red);
    
    draw_text(menu_x + button_h * i, menu_y, button[i,0]);
    draw_text(menu_x + button_h * i, menu_y + 64, button[i,1]);
    
    i++;
}




//draw_text(room_width/2,(room_height/3)-48,"Press A for A-Type")
//draw_text(room_width/2,(room_height/3),"Press B for B-Type")
//draw_text(room_width/2,(room_height/3)+64,"Press P for Pentris")
//draw_text(room_width/2,(room_height/3)+112,"Press L for Pentris B-Type")

if gamepad = 1 {draw_text(room_width/2,room_height-128,"A")}
if gamepad = 2 {draw_text(room_width/2,room_height-128,"B")}
if gamepad = 3 {draw_text(room_width/2,room_height-128,"Up")}
if gamepad = 4 {draw_text(room_width/2,room_height-128,"Down")}
if gamepad = 5 {draw_text(room_width/2,room_height-128,"Left")}
if gamepad = 6 {draw_text(room_width/2,room_height-128,"Right")}
if gamepad = 7 {draw_text(room_width/2,room_height-128,"Start")}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
